// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4a4asApkm6hESDYKtdyu2N
// Component: Qx2EHlFquu
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navigation from "../../Navigation"; // plasmic-import: YifvoXt3BSlX/component
import Logo from "../../Logo"; // plasmic-import: vwbA6W7e_64X/component
import Button from "../../Button"; // plasmic-import: OTuzjleeHGwD/component
import ValuesSection3 from "../../ValuesSection3"; // plasmic-import: RA0kcS6NzhvF/component
import Footer from "../../Footer"; // plasmic-import: qHry5XO3se/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_boombox.module.css"; // plasmic-import: 4a4asApkm6hESDYKtdyu2N/projectcss
import * as sty from "./PlasmicInvite.module.css"; // plasmic-import: Qx2EHlFquu/css

export type PlasmicInvite__VariantMembers = {};

export type PlasmicInvite__VariantsArgs = {};
type VariantPropType = keyof PlasmicInvite__VariantsArgs;
export const PlasmicInvite__VariantProps = new Array<VariantPropType>();

export type PlasmicInvite__ArgsType = {};
type ArgPropType = keyof PlasmicInvite__ArgsType;
export const PlasmicInvite__ArgProps = new Array<ArgPropType>();

export type PlasmicInvite__OverridesType = {
  root?: p.Flex<"div">;
  navigation?: p.Flex<typeof Navigation>;
  valuesSection3?: p.Flex<typeof ValuesSection3>;
  h2?: p.Flex<"h2">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultInviteProps {
  dataFetches: PlasmicInvite__Fetches;
}

function PlasmicInvite__RenderFunc(props: {
  variants: PlasmicInvite__VariantsArgs;
  args: PlasmicInvite__ArgsType;
  overrides: PlasmicInvite__OverridesType;
  dataFetches?: PlasmicInvite__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      <Head>
        <title key="title">{"Boombox Discord | Invite Link"}</title>
        <meta
          key="og:title"
          property="og:title"
          content={"Boombox Discord | Invite Link"}
        />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <Navigation
            data-plasmic-name={"navigation"}
            data-plasmic-override={overrides.navigation}
            boomboxBg={"boomboxBg" as const}
            className={classNames("__wab_instance", sty.navigation)}
            slot={
              <React.Fragment>
                <Button
                  children2={
                    <svg
                      className={classNames(defaultcss.all, sty.svg__cqxrj)}
                      role={"img"}
                    />
                  }
                  className={classNames("__wab_instance", sty.button__esOho)}
                  link={"/" as const}
                  navLink={"navLink" as const}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__lhC9O
                      )}
                    >
                      {"Home Page"}
                    </div>
                  }
                >
                  <svg
                    className={classNames(defaultcss.all, sty.svg__ffSzI)}
                    role={"img"}
                  />
                </Button>

                <Button
                  children2={
                    <svg
                      className={classNames(defaultcss.all, sty.svg__wDeI)}
                      role={"img"}
                    />
                  }
                  className={classNames("__wab_instance", sty.button__sbWWm)}
                  link={"https://www.patreon.com/boomboxdev" as const}
                  navLink={"navLink" as const}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text__i36SS
                      )}
                    >
                      {"Patreon"}
                    </div>
                  }
                >
                  <svg
                    className={classNames(defaultcss.all, sty.svg__cobLi)}
                    role={"img"}
                  />
                </Button>

                <Button
                  children2={
                    <svg
                      className={classNames(defaultcss.all, sty.svg__eFg80)}
                      role={"img"}
                    />
                  }
                  className={classNames("__wab_instance", sty.button__dVZfk)}
                  link={"https://status.boomboxdiscord.dev/" as const}
                  navLink={"navLink" as const}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.text___9L2Tc
                      )}
                    >
                      {"Status"}
                    </div>
                  }
                >
                  <svg
                    className={classNames(defaultcss.all, sty.svg___0S80E)}
                    role={"img"}
                  />
                </Button>

                <Button
                  children2={
                    <svg
                      className={classNames(defaultcss.all, sty.svg__ijDce)}
                      role={"img"}
                    />
                  }
                  className={classNames("__wab_instance", sty.button__wqM9B)}
                  link={"https://discord.gg/HKnyEB9" as const}
                  navLink={"navLink" as const}
                  slot={"Support Server"}
                >
                  <svg
                    className={classNames(defaultcss.all, sty.svg__qyQK)}
                    role={"img"}
                  />
                </Button>
              </React.Fragment>
            }
          />

          <ValuesSection3
            data-plasmic-name={"valuesSection3"}
            data-plasmic-override={overrides.valuesSection3}
            className={classNames("__wab_instance", sty.valuesSection3)}
            foreground={
              <React.Fragment>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox__k7M80)}
                >
                  <div
                    className={classNames(defaultcss.all, sty.freeBox__gpDgL)}
                  >
                    <h2
                      data-plasmic-name={"h2"}
                      data-plasmic-override={overrides.h2}
                      className={classNames(
                        defaultcss.h2,
                        defaultcss.__wab_text,
                        sty.h2
                      )}
                    >
                      {"Redirecting Now"}
                    </h2>
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.text__vsBn0
                    )}
                  >
                    {
                      "Please wait, we are redirecting you to the invite page. If you are not redirected in 3 seconds click the button below"
                    }
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox__mmTsb)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button__ikxGl)}
                    colors={"oxfordBlue" as const}
                    link={
                      "https://discord.com/oauth2/authorize?client_id=678819994250772480&permissions=36785152&scope=bot%20applications.commands" as const
                    }
                    slot={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.text___8QMbN
                        )}
                      >
                        {"Take me to the invite page"}
                      </div>
                    }
                  />
                </p.Stack>
              </React.Fragment>
            }
          />

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navigation", "valuesSection3", "h2", "footer"],
  navigation: ["navigation"],
  valuesSection3: ["valuesSection3", "h2"],
  h2: ["h2"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigation: typeof Navigation;
  valuesSection3: typeof ValuesSection3;
  h2: "h2";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInvite__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInvite__VariantsArgs;
    args?: PlasmicInvite__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicInvite__Fetches;
  } & Omit<PlasmicInvite__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInvite__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInvite__ArgProps,
      internalVariantPropNames: PlasmicInvite__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicInvite__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInvite";
  } else {
    func.displayName = `PlasmicInvite.${nodeName}`;
  }
  return func;
}

export const PlasmicInvite = Object.assign(
  // Top-level PlasmicInvite renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigation: makeNodeComponent("navigation"),
    valuesSection3: makeNodeComponent("valuesSection3"),
    h2: makeNodeComponent("h2"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicInvite
    internalVariantProps: PlasmicInvite__VariantProps,
    internalArgProps: PlasmicInvite__ArgProps
  }
);

export default PlasmicInvite;
/* prettier-ignore-end */
