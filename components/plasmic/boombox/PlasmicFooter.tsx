// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4a4asApkm6hESDYKtdyu2N
// Component: qHry5XO3se
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: OTuzjleeHGwD/component

import { useScreenVariants as useScreenVariantsfexfuEBwKf3Q } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: fexfuEBwKf3q/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_boombox.module.css"; // plasmic-import: 4a4asApkm6hESDYKtdyu2N/projectcss
import * as sty from "./PlasmicFooter.module.css"; // plasmic-import: qHry5XO3se/css

import GithubsvgIcon from "./icons/PlasmicIcon__Githubsvg"; // plasmic-import: aUhSDn7lt2/icon
import DiscordsvgIcon from "./icons/PlasmicIcon__Discordsvg"; // plasmic-import: XsHXLVKev/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: i179dYQDQ7/icon
import TwittersvgIcon from "./icons/PlasmicIcon__Twittersvg"; // plasmic-import: 9yB8Wkgc6o/icon
import DigitalOceanIcon from "./icons/PlasmicIcon__DigitalOcean"; // plasmic-import: 2vaDiSQ8y/icon

export type PlasmicFooter__VariantMembers = {};

export type PlasmicFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicFooter__ArgsType = {};
type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicFooter__OverridesType = {
  root?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  img?: p.Flex<"img">;
};

export interface DefaultFooterProps {
  className?: string;
}

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;
  dataFetches?: PlasmicFooter__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsfexfuEBwKf3Q()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(projectcss.all, sty.freeBox__o86QI)}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          hasGap={true}
          className={classNames(projectcss.all, sty.columns)}
        >
          <div className={classNames(projectcss.all, sty.column__qslx)}>
            <div className={classNames(projectcss.all, sty.freeBox__e6YH5)}>
              <img
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(projectcss.img, sty.img)}
                src={"/plasmic/boombox/images/boomboxPfpNewpng.png"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__stvMs
                )}
              >
                {"Boombox"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bXn4O
                )}
              >
                {
                  "Boombox is the best way to listen to music with your friends without any complicated setup. Add it to your server now to start listening!"
                }
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__iwBk)}>
                <Button
                  children2={
                    <svg
                      className={classNames(projectcss.all, sty.svg__l2Yew)}
                      role={"img"}
                    />
                  }
                  className={classNames("__wab_instance", sty.button__lBjiB)}
                  link={"https://github.com/Boombox-Discord" as const}
                  slot={
                    <GithubsvgIcon
                      className={classNames(projectcss.all, sty.svg__sdwIv)}
                      role={"img"}
                    />
                  }
                >
                  <svg
                    className={classNames(projectcss.all, sty.svg___71MDa)}
                    role={"img"}
                  />
                </Button>

                <Button
                  children2={
                    <svg
                      className={classNames(projectcss.all, sty.svg__obNys)}
                      role={"img"}
                    />
                  }
                  className={classNames("__wab_instance", sty.button__euHz4)}
                  link={"https://discord.gg/HKnyEB9" as const}
                  slot={
                    <DiscordsvgIcon
                      className={classNames(projectcss.all, sty.svg__obwr8)}
                      role={"img"}
                    />
                  }
                >
                  <svg
                    className={classNames(projectcss.all, sty.svg__xpkuM)}
                    role={"img"}
                  />
                </Button>

                <Button
                  children2={
                    <svg
                      className={classNames(projectcss.all, sty.svg__eQcxX)}
                      role={"img"}
                    />
                  }
                  className={classNames("__wab_instance", sty.button__zeUpV)}
                  link={"https://www.patreon.com/boomboxdev" as const}
                  slot={
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__ntQhd)}
                      role={"img"}
                    />
                  }
                >
                  <svg
                    className={classNames(projectcss.all, sty.svg__lhoDm)}
                    role={"img"}
                  />
                </Button>

                <Button
                  children2={
                    <svg
                      className={classNames(projectcss.all, sty.svg__q1So1)}
                      role={"img"}
                    />
                  }
                  className={classNames("__wab_instance", sty.button__ye3Rl)}
                  link={"https://twitter.com/BoomboxDiscord" as const}
                  slot={
                    <TwittersvgIcon
                      className={classNames(projectcss.all, sty.svg__gepJx)}
                      role={"img"}
                    />
                  }
                >
                  <svg
                    className={classNames(projectcss.all, sty.svg__xf5MM)}
                    role={"img"}
                  />
                </Button>
              </div>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.column__iuxXf)}>
            <div className={classNames(projectcss.all, sty.freeBox__lurdQ)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__knzcX
                )}
              >
                {"Boombox"}
              </div>

              <Button
                children2={
                  <svg
                    className={classNames(projectcss.all, sty.svg___86XUq)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.button___6Zrtx)}
                link={"#learn-more" as const}
                slot={"Learn More"}
              >
                <svg
                  className={classNames(projectcss.all, sty.svg__frWkq)}
                  role={"img"}
                />
              </Button>

              <Button
                children2={
                  <svg
                    className={classNames(projectcss.all, sty.svg__s4Mb6)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.button___7EAn)}
                link={"#commands" as const}
                slot={"Commands"}
              >
                <svg
                  className={classNames(projectcss.all, sty.svg___0UEj)}
                  role={"img"}
                />
              </Button>

              <Button
                children2={
                  <svg
                    className={classNames(projectcss.all, sty.svg__xuy0K)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.button__lfsj)}
                link={"https://www.patreon.com/boomboxdev" as const}
                slot={"Patreon"}
              >
                <svg
                  className={classNames(projectcss.all, sty.svg___63EXk)}
                  role={"img"}
                />
              </Button>

              <Button
                children2={
                  <svg
                    className={classNames(projectcss.all, sty.svg___1M3Wq)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.button__lh50)}
                link={"/invite" as const}
                slot={"Invite Link"}
              >
                <svg
                  className={classNames(projectcss.all, sty.svg__ubKjL)}
                  role={"img"}
                />
              </Button>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.column__pVkR)}>
            <div className={classNames(projectcss.all, sty.freeBox__uYVh)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mJzdm
                )}
              >
                {"Get Help"}
              </div>

              <Button
                children2={
                  <svg
                    className={classNames(projectcss.all, sty.svg__qdp1M)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.button__uxMbY)}
                link={"https://status.boomboxdiscord.dev/" as const}
                slot={"Server Status"}
              >
                <svg
                  className={classNames(projectcss.all, sty.svg__ivQiv)}
                  role={"img"}
                />
              </Button>

              <Button
                children2={
                  <svg
                    className={classNames(projectcss.all, sty.svg__kyjYl)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.button__bwwW5)}
                link={"http://discord.gg/HKnyEB9" as const}
                slot={"Support Server"}
              >
                <svg
                  className={classNames(projectcss.all, sty.svg__zxgMf)}
                  role={"img"}
                />
              </Button>

              <Button
                children2={
                  <svg
                    className={classNames(projectcss.all, sty.svg__qGwNg)}
                    role={"img"}
                  />
                }
                className={classNames("__wab_instance", sty.button___3EdfW)}
                link={"https://www.patreon.com/boomboxdev" as const}
                slot={"Patreon"}
              >
                <svg
                  className={classNames(projectcss.all, sty.svg__xxjxn)}
                  role={"img"}
                />
              </Button>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.column__yvAnQ)}>
            <Button
              className={classNames("__wab_instance", sty.button__hnmY)}
              link={
                "https://www.digitalocean.com/?refcode=430f071b1344&utm_campaign=Referral_Invite&utm_medium=Referral_Program&utm_source=badge" as const
              }
              slot={
                <DigitalOceanIcon
                  className={classNames(projectcss.all, sty.svg__uvYO)}
                  role={"img"}
                />
              }
            />
          </div>
        </p.Stack>
      </div>

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___5GwXa
        )}
      >
        {"© 2021 Boombox-Dev. All rights reserved."}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "columns", "img"],
  columns: ["columns", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
  img: "img";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicFooter__Fetches;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooter__ArgProps,
      internalVariantPropNames: PlasmicFooter__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
