// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4a4asApkm6hESDYKtdyu2N
// Component: dwwYm9-1Net
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: WB6h5LQiaaY8/component
import Button from "../../Button"; // plasmic-import: OTuzjleeHGwD/component
import Navigation from "../../Navigation"; // plasmic-import: YifvoXt3BSlX/component
import ValuesSection3 from "../../ValuesSection3"; // plasmic-import: RA0kcS6NzhvF/component
import TableCommands from "../../TableCommands"; // plasmic-import: GrIe7_lVtx/component
import BoomboxBottomInvite from "../../BoomboxBottomInvite"; // plasmic-import: aBt1NRUsayI0/component
import Footer from "../../Footer"; // plasmic-import: qHry5XO3se/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_boombox.module.css"; // plasmic-import: 4a4asApkm6hESDYKtdyu2N/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: dwwYm9-1Net/css

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  navigation?: p.Flex<typeof Navigation>;
  valuesSection3?: p.Flex<typeof ValuesSection3>;
  h2?: p.Flex<"h2">;
  tableCommands?: p.Flex<typeof TableCommands>;
  boomboxBottomInvite?: p.Flex<typeof BoomboxBottomInvite>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultHomepageProps {}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
            foreground={
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__qmWfb)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__lPxLd)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mveo
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ textDecoration: "underline" }}
                      >
                        {"Boombox is now archived."}
                      </span>
                    </React.Fragment>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__obXrB
                    )}
                  >
                    {
                      "We have made the decision to shutdown Boombox.\nScroll down to read why."
                    }
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__gtrar)}
                >
                  <Button
                    children2={
                      <svg
                        className={classNames(projectcss.all, sty.svg__womkt)}
                        role={"img"}
                      />
                    }
                    className={classNames("__wab_instance", sty.button__iD4Qh)}
                    darkGray={true}
                    link={"#learn-more" as const}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__fl2Cm
                        )}
                      >
                        {"Learn moreâ€¦"}
                      </div>
                    }
                  >
                    <svg
                      className={classNames(projectcss.all, sty.svg__r3DuU)}
                      role={"img"}
                    />
                  </Button>
                </p.Stack>
              </p.Stack>
            }
          >
            <Navigation
              data-plasmic-name={"navigation"}
              data-plasmic-override={overrides.navigation}
              className={classNames("__wab_instance", sty.navigation)}
              slot={
                <React.Fragment>
                  <Button
                    children2={
                      <svg
                        className={classNames(projectcss.all, sty.svg__wZKtY)}
                        role={"img"}
                      />
                    }
                    className={classNames("__wab_instance", sty.button__bRE)}
                    link={"https://www.patreon.com/boomboxdev" as const}
                    navLink={true}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lqUf3
                        )}
                      >
                        {"Patreon"}
                      </div>
                    }
                  >
                    <svg
                      className={classNames(projectcss.all, sty.svg___4X8Ba)}
                      role={"img"}
                    />
                  </Button>

                  <Button
                    children2={
                      <svg
                        className={classNames(projectcss.all, sty.svg__bi5F7)}
                        role={"img"}
                      />
                    }
                    className={classNames("__wab_instance", sty.button__dfVV)}
                    link={"https://status.boomboxdiscord.dev/" as const}
                    navLink={true}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kwcpo
                        )}
                      >
                        {"Status"}
                      </div>
                    }
                  >
                    <svg
                      className={classNames(projectcss.all, sty.svg__scUzc)}
                      role={"img"}
                    />
                  </Button>

                  <Button
                    children2={
                      <svg
                        className={classNames(projectcss.all, sty.svg___5BsU)}
                        role={"img"}
                      />
                    }
                    className={classNames("__wab_instance", sty.button__dN5Vc)}
                    link={"https://discord.gg/HKnyEB9" as const}
                    navLink={true}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___059VL
                        )}
                      >
                        {"Support Server"}
                      </div>
                    }
                  >
                    <svg
                      className={classNames(projectcss.all, sty.svg__dZype)}
                      role={"img"}
                    />
                  </Button>
                </React.Fragment>
              }
            >
              <img
                alt={""}
                className={classNames(
                  projectcss.all,
                  projectcss.img,
                  sty.img__yAqDz
                )}
                src={"/plasmic/boombox/images/boomboxPfpNewpng.png"}
              />
            </Navigation>
          </Header>

          <div
            className={classNames(projectcss.all, sty.freeBox__t72Kq)}
            id={"services" as const}
          >
            <ValuesSection3
              data-plasmic-name={"valuesSection3"}
              data-plasmic-override={overrides.valuesSection3}
              foreground={
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tz9K9)}
                  id={"learn-more" as const}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__o6M6M)}
                  >
                    <h2
                      data-plasmic-name={"h2"}
                      data-plasmic-override={overrides.h2}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2
                      )}
                    >
                      {"Boombox is now archived."}
                    </h2>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pdq14
                    )}
                  >
                    {
                      "On the 30th of September we made the decision to shutdown the Boombox Project. This was due to the fact that Discord removed our verification status, meaning Boombox can no longer join any servers. All of our GitHub Repositories are now in read only mode. The Boombox Developer Team would like to thank everyone for their support by using Boombox and helping to contribute to it's development."
                    }
                  </div>
                </p.Stack>
              }
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___39ReI
              )}
            >
              {"Commands"}
            </div>
          </div>

          <TableCommands
            data-plasmic-name={"tableCommands"}
            data-plasmic-override={overrides.tableCommands}
            className={classNames("__wab_instance", sty.tableCommands)}
          />

          <BoomboxBottomInvite
            data-plasmic-name={"boomboxBottomInvite"}
            data-plasmic-override={overrides.boomboxBottomInvite}
            art={
              <img
                alt={""}
                className={classNames(
                  projectcss.all,
                  projectcss.img,
                  sty.img__mVcIh
                )}
                src={"/plasmic/boombox/images/boomboxBottomBannersvg2.svg"}
              />
            }
            className={classNames("__wab_instance", sty.boomboxBottomInvite)}
            copy={
              <React.Fragment>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__luMkU)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rQbE
                    )}
                  >
                    {"Need a second bot?"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__scnVr
                    )}
                  >
                    {
                      "Become a Patron for only $3 per month and get access to a patron only Boombox, which runs on separate servers to the main bot so that it performs better. When you become a patron you will also get other cool perks."
                    }
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__jsnUb)}
                >
                  <Button
                    children2={
                      <svg
                        className={classNames(projectcss.all, sty.svg__negcK)}
                        role={"img"}
                      />
                    }
                    className={classNames("__wab_instance", sty.button__s28Xb)}
                    darkGray={true}
                    link={"https://www.patreon.com/boomboxdev" as const}
                    slot={"Become a Patron->"}
                  >
                    <svg
                      className={classNames(projectcss.all, sty.svg__sYgzE)}
                      role={"img"}
                    />
                  </Button>
                </p.Stack>
              </React.Fragment>
            }
          />

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "navigation",
    "valuesSection3",
    "h2",
    "tableCommands",
    "boomboxBottomInvite",
    "footer"
  ],
  header: ["header", "navigation"],
  navigation: ["navigation"],
  valuesSection3: ["valuesSection3", "h2"],
  h2: ["h2"],
  tableCommands: ["tableCommands"],
  boomboxBottomInvite: ["boomboxBottomInvite"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  navigation: typeof Navigation;
  valuesSection3: typeof ValuesSection3;
  h2: "h2";
  tableCommands: typeof TableCommands;
  boomboxBottomInvite: typeof BoomboxBottomInvite;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    navigation: makeNodeComponent("navigation"),
    valuesSection3: makeNodeComponent("valuesSection3"),
    h2: makeNodeComponent("h2"),
    tableCommands: makeNodeComponent("tableCommands"),
    boomboxBottomInvite: makeNodeComponent("boomboxBottomInvite"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Boombox - Free Discord Music Bot",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
